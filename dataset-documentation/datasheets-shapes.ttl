@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix terms: <http://purl.org/dc/terms/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix dqv: <http://www.w3.org/ns/dqv#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix airo: <https://w3id.org/airo#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

# Example namespace for any new types.
@prefix : <https://example.org/ex#> .

# TODO: reference the dimensions in `datasheets-dcat-dqv.ttl` using valid URIs.

# Use SHACL SPARQL rules everywhere for consistency, even where no 'if/else' logic is required.
:DatasheetShape rdf:type sh:NodeShape ;
    sh:targetClass dcat:Dataset ;
    ################################
    # Has purpose
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasPurposeMeasurement true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :PurposeDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasPurposeMeasurement ;
        sh:hasValue true ;
        sh:message "Dataset must have a purpose measurement with a string value"@en
    ] ;
    ################################
    # Created by
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX terms: <http://purl.org/dc/terms/>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasCreatedBy true .
            }
            WHERE {
                $this terms:creator ?entity .
            }
        """
    ] ;
    sh:property [
        sh:path :hasCreatedBy ;
        sh:hasValue true ;
        sh:message "Dataset must have a creator property"@en
    ] ;
    ################################
    # Funded by
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasFundingField true .
                $this :hasFunding ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :FundingPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
            """
    ];
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasFundingDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :FundingDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasFundingField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether funding was received"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :hasFunding ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasFundingDescription ;
                sh:hasValue true ;
                sh:message "Because it was indicated that funding was provided, a string description must be provided."@en
            ]
        ]
    ] ;
    ################################
    # Comprised of instances - require at minimum human-readable details.
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceCompositionDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceTypesDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasInstanceCompositionDescription ;
        sh:hasValue true ;
        sh:message "There must be at minimum a human-readable description of instance composition."@en
    ] ;
    ################################
    # Instance counts
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceCount true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceCountDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:nonNegativeInteger)
            }
        """
    ] ;
    sh:property [
        sh:path :hasInstanceCount ;
        sh:hasValue true ;
        sh:message "There must be count of the number of instances in the dataset"@en
    ] ;
    ################################
    # Instances subset or all
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSamplingDimension true .
                $this :samplingDimensionValue ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SamplingDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRepresentativenessDimension true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RepresentativenessDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSamplingMethodDimension true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SamplingMethodDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }

        """
    ] ;
    sh:property [
        sh:path :hasSamplingDimension ;
        sh:hasValue true ;
        sh:message "There must be information pertaining to whether the dataset is complete or a sample (from a larger dataset)"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :samplingDimensionValue ;
                sh:hasValue false ; # => a subset (of a larger dataset); interpreted: *not* a complete dataset
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasRepresentativenessDimension ;
                sh:hasValue true ;
                sh:message "If the dataset is a sample (of a larger dataset), then its datasheet must describe how representative the sample is of the larger set"@en
            ] ;
            sh:property [
                sh:path :hasSamplingMethodDimension ;
                sh:hasValue true ;
                sh:message "If the dataset is a sample (of a larger dataset), then its datasheet must describe the method used for sampling" ;
            ]
        ]
    ] ;
    ################################
    # Each instance consists of
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceComposition true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceCompositionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasFeatureDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :FeatureDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasInstanceComposition ;
        sh:hasValue true ;
        sh:message "A datasheet must describe what each instance in the dataset consists of"@en
    ] ;
    sh:property [
        sh:path :hasFeatureDescription ;
        sh:hasValue true ;
        sh:message "A datasheet must provide a detailed description of the features in each instance"@en
    ] ;
    ################################
    # Label or target
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasLabelOrTarget true .
                $this :labelOrTargetValue ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :LabelPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasLabelOrTargetDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :LabelDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:path [
        sh:path :hasLabelOrTarget ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether labels or targets are associated with instances"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :labelOrTargetValue ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasLabelOrTargetDescription ;
                sh:hasValue true ;
                sh:message "When a datasheet indicates that labels or targets are associated with instances, then there must be a description."@en
            ]
        ]
    ] ;
    ################################
    # Missing information
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasMissingInfoField true .
                $this :missingInfo ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :MissingInfoPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasMissingInfoDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :MissingInfoDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasMissingInfoField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether any information is missing from individual instances"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :missingInfo ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasMissingInfoDescription ;
                sh:hasValue true ;
                sh:message "If a datasheet indicates that there is missing information, details must also be provided about what information is missing and why."@en
            ]
        ]
    ] ;
    ################################
    # Relationships made explicit
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRelationshipField true .
                $this :relationshipExplicit ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RelationshipPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRelationshipDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RelationshipDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasRelationshipField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether relationships between individual instances are made explicit"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :relationshipExplicit ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasRelationshipDescription ;
                sh:hasValue true ;
                sh:message "When it is indicated that relationships between individuals are made explicit, then a description must be provided."@en
            ]
        ]
    ] ;
    ################################
    # Data splits
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataSplitField true .
                $this :hasRecommendedDataSplits ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataSplitPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                ?this :hasRecommendedDataSplitsDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataSplitDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDataSplitField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether recommended data splits are provided"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :hasRecommendedDataSplits ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasRecommendedDataSplitsDescription ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Errors, noise, redundancies
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataIssuesField true .
                $this :dataIssues ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataIssuesPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataIssuesDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataIssuesDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDataIssuesField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether recommended data splits are provided"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :dataIssues ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasDataIssuesDescriptionField ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # External resources
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasExternalResourceField true .
                $this :externalResources ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ExternalResourcesDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasExternalResourcesDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ExternalResourcesDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasResourceGuaranteesDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ResourceGuaranteesDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasArchivalVersionsDescription true .
            } 
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ArchivalVersionsDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasExternalRestrictionsDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ExternalRestrictionsDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasExternalResourceField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether the dataset links to or relies on external resources"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :externalResources ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasExternalResourcesDescription ;
                sh:hasValue true ;
                sh:message "If a dataset links to or relies on external resources, then a datasheet must describe all external resources and any restrictions associated with them, as well as links or other access points as appropriate."@en
            ] ;
            sh:property [
                sh:path :hasResourceGuaranteesDescription ;
                sh:hasValue true ;
                sh:message "If a dataset links to or relies on external resources, then it must specify whether there are guarantees they will exist, and remain constant, over time."@en
            ] ;
            sh:property [
                sh:path :hasArchivalVersionsDescription ;
                sh:hasValue true ;
                sh:message "If a dataset links to or relies on external resources, then it must specify whether there are official archival versions of the complete dataset (i.e., including the external resources as they existed at the time the dataset was created)"@en
            ] ;
            sh:property [
                sh:path :hasExternalRestrictionsDescription ;
                sh:hasValue true ;
                sh:message "If a dataset links to or relies on external resources, then it must describe any restrictions associated with the external resources"@en
            ]
        ]
    ] ;
    ################################
    # Confidental data
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasConfidentialDataField true .
                $this :confidentialData ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ConfidentialDataPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasConfidentialDataDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ConfidentialDataDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasConfidentialDataField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether the dataset contains data that might be considered confidential"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :confidentialData ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasConfidentialDataDescription ;
                sh:hasValue true ;
                sh:message "If a datasheet indicates that there is confidential data, then it must also contain a description about the nature of confidential data in the dataset"@en
            ]
        ]
    ] ;
    ################################
    # Offensive data
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSensitiveContentField true .
                $this :sensitiveContent ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SensitiveContentPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSensitiveContentDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SensitiveContentDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasSensitiveContentField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether the dataset contains potentially offensive or anxiety-causing content"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :sensitiveContent ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasSensitiveContentDescription ;
                sh:hasValue true ;
                sh:message "If a datasheet indicates that there is potentially offensive or anxiety-causing content, then it must also provide details about the nature of this content"@en
            ]
        ]
    ] ;
    ################################
    # Subpopulations
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSubpopulationsField true .
                $this :subPopulations ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SubpopulationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSubpopulationsDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SubpopulationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasSubpopulationsField ;
        sh:hasValue true ;
        sh:message "A datasheet must indicate whether the dataset identifies subpopulations"@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :subPopulations ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasSubpopulationsDescription ;
                sh:hasValue true ;
                sh:message "If a datasheet indicates that the dataset identifies subpopulations, then it must also provide details about how subpopulations are identified and their distributions within the dataset"@en
            ]
        ]
    ] ;
    ################################
    # Identifiable individuals
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasIndividualIdentificationField true .
                $this :individualIdentification ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :IndividualIdentificationPossibilityDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasIndividualIdentificationDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :IndividualIdentificationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasIndividualIdentificationField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :individualIdentification ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasIndividualIdentificationDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Sensitive data
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSensitiveDataField true .
                $this :sensitiveData ?value . 
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SensitiveDataPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this hasSensitiveDataDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SensitiveDataDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasSensitiveDataField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :sensitiveData ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasSensitiveDataDescription ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Instance data acquisition 
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this hasInstanceAcquisitionField true .
                $this instanceAcquisition ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceAcquisitionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = :InstanceAcquisitionMeans)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceAcquisitionVerificationField true .
                $this :instanceVerification ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceAcquisitionVerificationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceVerificationDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceAcquisitionVerificationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasInstanceAcquisitionField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:or (
                [
                    sh:property [
                        sh:path :instanceAcquisition ;
                        sh:hasValue :IndirectInferenceDerived
                    ]
                ]
                [
                    sh:property [
                        sh:path :instanceAcquisition ;
                        sh:hasValue :SubjectReported
                    ]
                ]
            )
        ] ;
        sh:then [
            sh:property [
                sh:path :hasInstanceAcquisitionVerificationField ;
                sh:hasValue true
            ] ;
            sh:property [
                sh:path :hasInstanceVerificationDescription ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Data acquisition mechanisms
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataAcquisitionMechanismField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataAcquisitionMechanismDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataAcquisitionMechanismValidationField true .
                :dataAcquisitionMechanismValidation ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataAcquisitionMechanismValidationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataAcquisitionMechanismValidationDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataAcquisitionMechanismValidationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDataAcquisitionMechanismField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:property [
        sh:path :hasDataAcquisitionMechanismValidationField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :dataAcquisitionMechanismValidation ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasDataAcquisitionMechanismValidationDescription ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Collection duration
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX terms: <http://purl.org/dc/terms/>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDatespanField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DatespanDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = terms:temporal)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX terms: <http://purl.org/dc/terms/>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDatespanMatchesInstanceField true .
                $this :dateSpanMatches ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DatespanMatchesInstanceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX terms: <http://purl.org/dc/terms/>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceDateDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceDateDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDatespanField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:property [
        sh:path :hasDatespanMatchesInstanceField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :dateSpanMatches ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:property [
                    sh:path :hasInstanceDateDescriptionField ;
                    sh:hasValue true
                ]
            ]
        ]
    ] ;
    ################################
    # Ethical review
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasEthicalReviewField true .
                $this :ethicalReview ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :EthicalReviewPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasEthicalReviewDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :EthicalReviewDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasEthicalReviewField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :ethicalReview ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasEthicalReviewDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Third-party
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasThirdPartyField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ThirdPartyDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:property [
        sh:path :hasThirdPartyField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    ################################
    # Provided notification
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasProvidedNotificationField true .
                $this providedNotification ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ProvidedNotificationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasProvidedNotificationDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ProvidedNotificationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasProvidedNotificationField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :providedNotification ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasProvidedNotificationDescription ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Consent obtained
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasConsentObtainedField true .
                $this :consentObtained ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ConsentObtainedPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasConsentObtainedDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ConsentObtainedDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasConsentObtainedField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :consentObtained ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasConsentObtainedDescriptionField ;
                sh:hasValue true;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Consent revokation mechanism
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasConsentRevokationField true .
                $this :consentRevokation ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ConsentRevokationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasConsentRevokationDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ConsentRevokationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasConsentRevokationField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :consentRevokation ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasConsentRevokationDescriptionField ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Impact analysis
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasImpactAnalysisField true .
                $this :impactAnalysis ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ImpactAnalysisDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasImpactAnalysisDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ImpactAnalysisDescriptionDimension
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasImpactAnalysisField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :impactAnalysis ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasImpactAnalysisDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Preprocessing data
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasPreprocessingDataField true .
                $this :preprocessingData ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :PreprocessingDataPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasPreprocessingDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :PreprocessingDataDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRawDataSavedField true .
                $this :rawDataSaved ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RawDataSavedPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRawDataSavedAccessPoint true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RawDataSavedAccessPointDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:anyURI)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSoftwareAvailableField true .
                $this :softwareAvailable ?value .
            }
            WHERE 
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SoftwareAvailablePresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasSoftwareAvailableAccessPoint true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :SoftwareAvailableAccessPointDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:anyURI)
            }
        """
    ] ;
    sh:property [
        sh:path :hasPreprocessingDataField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :preprocessingData ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasPreprocessingDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:property [
                sh:path :hasRawDataSavedField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:property [
                sh:path :hasSoftwareAvailableField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:if [
                sh:property [
                    sh:path :rawDataSaved ;
                    sh:hasValue true
                ]
            ] ;
            sh:then [
                sh:property [
                    sh:path :hasRawDataSavedAccessPoint ;
                    sh:hasValue true ;
                    sh:message ""@en
                ]
            ] ;
            sh:if [
                sh:property [
                    sh:path :softwareAvailable ;
                    sh:hasValue true
                ]
            ] ;
            sh:then [
                sh:property [
                    sh:path :hasSoftwareAvailableAccessPoint ;
                    sh:hasValue true ;
                    sh:message ""@en
                ]
            ]
        ]
    ] ;
    ################################
    # Tasks used for
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasTasksUsedForField true .
                $this :tasksUsedFor ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :TasksUsedForPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasTasksUsedForDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :TasksUsedForDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasTasksUsedForField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :tasksUsedFor ;
                sh:hasValue true
            ]        
        ] ;
        sh:then [
            sh:property [
                sh:path :hasTasksUsedForDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Links to papers or systems
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRepositoryLinksField true .
                $this :repositoryLinks ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RepositoryLinksPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasRepositoryLinksAccessPoint true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :RepositoryLinksAccessPointDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:anyURI)
            }
        """
    ] ;
    sh:property [
        sh:path :hasRepositoryLinksField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :repositoryLinks ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasRepositoryLinksAccessPoint ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Other possible tasks
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasOtherPossibleTasksField true .
                $this :otherPossibleTasks ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :OtherPossibleTasksPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasOtherPossibleTasksDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :OtherPossibleTasksDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasOtherPossibleTasksField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :otherPossibleTasks ;
                sh:hasValue true
            ]            
        ] ;
        sh:then [
            sh:property [
                sh:path :hasOtherPossibleTasksDescriptionField ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Data composition, collection / processing impact
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasCCPIField true .
                $this :CCPI ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :CompositionCollectionProcessingFutureImpactPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasCCPIDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :CompositionCollectionProcessingFutureImpactDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasCCPIField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :CCPI ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasCCPIDescriptionField ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Not other tasks
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasNotToBeUsedForTaskField true .
                $this :notToBeUsedFor ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :NotToBeUsedForTaskPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasNotToBeUsedForTaskDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :NotToBeUsedForTaskDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }

        """
    ] ;
    sh:property [
        sh:path :hasNotToBeUsedForTaskField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :notToBeUsedFor ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasNotToBeUsedForTaskDescription ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Third-party distribution
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasThirdPartyDistributionField true .
                $this :thirdPartyDistribution ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ThirdPartyDistributionPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasThirdPartyDistributionDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ThirdPartyDistributionDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasThirdPartyDistributionField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :thirdPartyDistribution ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasThirdPartyDistributionDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Distribution means
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDistributionMeansField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DistributionMeansDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDOIField true .
                $this :DOIpresent ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :hasDOIDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDOI true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DOIDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:anyURI)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDistributionMeansField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:property [
        sh:path :hasDOIField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :DOIpresent ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasDOI ;
                sh:hasValue true
            ]
        ]
    ] ;
    ################################
    # Distribution date
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDistributionDateField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DistributionDateDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:date)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDistributionDateField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    ################################
    # License
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasLicenseField true .
                $this :hasLicense ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :LicensePresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasLicenseDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :LicenseDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasLicenseField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :hasLicense ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasLicenseDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Restrictions on instance data
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceDataRestrictionsField true .
                $this :instanceDataRestrictions ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceDataRestrictionPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasInstanceDataRestrictionsDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :InstanceDataRestrictionDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasInstanceDataRestrictionsField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :instanceDataRestrictions ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasInstanceDataRestrictionsDescription ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Export controls / regulatory restrictions
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasExportControlRegulatoryField true .
                $this :exportControlRegulatory ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ExportControlRegulatoryRestrictionPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this hasExportControlRegulatoryDescription true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ExportControlRegulatoryRestrictionDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasExportControlRegulatoryField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :exportControlRegulatory ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasExportControlRegulatoryDescription ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Dataset maintainer
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasMaintainerField true .
            }
            WHERE {
                $this :maintainer ?m .
            }
        """
    ] ;
    sh:property [
        sh:path :hasMaintainerField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    ################################
    # Manager contact means
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasManagerField true .
            }
            WHERE {
                $this :managerContact ?m .
            }
        """
    ] ;
    sh:property [
        sh:path :hasManagerField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    ################################
    # Erratum
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasErratumField true .
                $this :erratum ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ErratumPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasErratumAccessPointField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :ErratumAccessPointDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:anyURI)
            }
        """
    ] ;
    sh:property [
        sh:path :hasErratumField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :erratum ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasErratumAccessPointField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Update details
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasUpdateField true .
                $this :willBeUpdated ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :UpdatePresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasUpdateFrequencyField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :UpdateFrequencyDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    # TODO: consider another more machine-readable type for UpdaterDimension than xsd:string
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasUpdaterField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :UpdaterDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasUpdateCommunicationMeansField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :UpdateCommunicationDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasUpdateField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :willBeUpdated ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasUpdateFrequencyField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:property [
                sh:path :hasUpdaterField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:property [
                sh:path :hasUpdateCommunicationMeansField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Data retention limits
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataRetentionLimitField true .
                $this :dataRetentionLimit ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataRetentionPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasDataRetentionLimitDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :DataRetentionDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasDataRetentionLimitField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :dataRetentionLimit ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasDataRetentionLimitDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ]
        ]
    ] ;
    ################################
    # Legacy support
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasLegacySupportField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :LegacySupportPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasLegacySupportDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :LegacySupportDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasLegacySupportField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    # Because a description is required in either case, the description field is also mandatory
    sh:property [
        sh:path :hasLegacySupportDescriptionField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    ################################
    # Augmentation mechanism
    ################################
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasAugmentationPossibilityField true .
                $this :augmentationPossible ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :AugmentationPossibilityPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasAugmentationPossibilityDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :AugmentationPossibilityDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasAugmentationValidationField true .
                $this :augmentationValidation ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :AugmentationValidationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasAugmentationValidationDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :AugmentationValidationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasAugmentationCommunicationField true .
                $this :augmentationCommunication ?value .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :AugmentationCommunicationPresenceDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:boolean)
            }
        """
    ] ;
    sh:rule [
        rdf:type sh:SPARQLRule ;
        sh:construct """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX : <https://example.org/ex#>

            CONSTRUCT {
                $this :hasAugmentationCommunicationDescriptionField true .
            }
            WHERE {
                ?measurement dqv:computedOn $this ;
                    rdf:type dqv:QualityMeasurement ;
                    dqv:inDimension :AugmentationCommunicationDescriptionDimension ;
                    dqv:value ?value .
                FILTER(datatype(?value) = xsd:string)
            }
        """
    ] ;
    sh:property [
        sh:path :hasAugmentationPossibilityField ;
        sh:hasValue true ;
        sh:message ""@en
    ] ;
    sh:rule [
        sh:if [
            sh:property [
                sh:path :augmentationPossible ;
                sh:hasValue true
            ]
        ] ;
        sh:then [
            sh:property [
                sh:path :hasAugmentationPossibilityDescriptionField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:property [
                sh:path :hasAugmentationValidationField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;
            sh:property [
                sh:path :hasAugmentationCommunicationField ;
                sh:hasValue true ;
                sh:message ""@en
            ] ;

            sh:if [
                sh:property [
                    sh:path :augmentationCommunication ;
                    sh:hasValue true
                ]
            ] ;
            sh:then [
                sh:property [
                    sh:path :hasAugmentationCommunicationDescriptionField ;
                    sh:hasValue true ;
                    sh:message ""@en
                ]
            ] ;

            sh:if [
                sh:property [
                    sh:path :augmentationValidation ;
                    sh:hasValue true
                ]
            ] ;
            sh:then [
                sh:property [
                    sh:path :hasAugmentationValidationDescriptionField ;
                    sh:hasValue true ;
                    sh:message ""@en
                ]
            ]
        ]
    ] .
